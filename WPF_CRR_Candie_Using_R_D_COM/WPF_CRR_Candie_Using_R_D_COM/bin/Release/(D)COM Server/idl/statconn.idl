/********************************************************************************
*  StatConnectorSrv: COM server to access Connector interface SC_Proxy
*  Copyright (C) 1999--2008 Thomas Baier
*
*  This software is distributed under the terms of the
*
*                  R/SCILAB (D)COM SERVER PUBLIC LICENSE
*                       (Version 1, November 2, 2008)
*
********************************************************************************/
// $Id: statconn.idl,v 1.1 2004/03/25 07:03:20 baier Exp $
import "oaidl.idl";

#if 0
[ uuid(c120e8f7-56b6-4694-94fb-5d7d8fc83cf8)] struct StatConnectorComplex
{
  double r;
  double i;
};
#endif

[
 object,
 uuid(18c8b663-81a2-11d3-9254-00e09812f727),
 dual,
 helpstring("graphics device for statistical connector"),
 pointer_default(unique)
]
interface ISGFX /*IStatConnectorGraphicsDevice */: IDispatch
{
  // activation
  [id(1), helpstring("activate device")]
  HRESULT ActivateDevice ();
  [id(2), helpstring("deactivate device")]
  HRESULT DeactivateDevice ();
  [id(3), helpstring("start drawing")]
  HRESULT BeginDrawing ();
  [id(4), helpstring("stop drawing")]
  HRESULT EndDrawing ();

  // drawing actions
  [id(5), helpstring("draw a line")]
  HRESULT DrawLine ([in] double dblStartX,[in] double dblStartY,
		    [in] double dblEndX,[in] double dblEnd,
		    [in] ULONG ulColor); // line type and width missing
  [id(6), helpstring("draw a circle")]
  HRESULT DrawCircle ([in] double dblCenterX,[in] double dblCenterY,
		      [in] double rad,[in] ULONG ulBorderColor,
		      [in] ULONG ulFillColor); // line type and width missing
  [id(7), helpstring("draw a polygon")]
  HRESULT DrawPolygon ([in] SAFEARRAY(double)* adblPointsX,
		       [in] SAFEARRAY(double)* adblPointsY,
		       [in] ULONG ulBorderColor,[in] ULONG ulFillColor);
  [id(8), helpstring("draw a polyline")]
  HRESULT DrawPolyline ([in] SAFEARRAY(double)* adblPointsX,
			[in] SAFEARRAY(double)* adblPointsY,
			[in] ULONG ulColor);
  [id(9), helpstring("draw a rectangle")]
  HRESULT DrawRectangle ([in] double dblStartX,[in] double dblStartY,
			 [in] double dblEndX,[in] double dblEnd,
			 [in] ULONG ulBorderColor,[in] ULONG ulFillColor); // line type and width missing
  [id(10), helpstring("draw text")]
  HRESULT DrawText ([in] double dblX,[in] double dblY,[in] BSTR bstrText,
		    [in] double dblAngle,[in] double dblAdjustment,
		    [in] int iFont,[in] int iSize,[in] ULONG ulColor);
  [id(11), helpstring("set clipping")]
  HRESULT SetClipping ([in] double dblStartX,[in] double dblStartY,
		       [in] double dblEndX,[in] double dblEndY);

  // querying information
  [id(12), helpstring("retrieve width and height")]
  HRESULT GetDimensions ([in,out] double* pdblWidth,
			 [in,out] double* pdblHeight);
  [id(13), helpstring("retrieve pointer position")]
  HRESULT GetMousePosition ([in,out] double* pdblX,[in,out] double* pdblY);
  [id(14), helpstring("return width of string")]
  HRESULT GetStringWidth ([in] BSTR bstrText,[out,retval] double* pdblWidth);
  [id(15), helpstring("return character metrics")]
  HRESULT GetCharacterInformation ([in] BSTR cCharacter,
				   [in,out] double* pdblAscent,
				   [in,out] double* pdblDescent,
				   [in,out] double* pdblWidth);

  [id(16), helpstring("clear the device")]
  HRESULT ClearPage ();
};

[
 object,
 uuid(18c8b664-81a2-11d3-9254-00e09812f727),
 dual,
 helpstring("character for statistical connector"),
 pointer_default(unique)
]
interface IStatConnectorCharacterDevice : IDispatch
{
  [id(1), helpstring("write")] HRESULT WriteString([in] BSTR bstrLine);
  [id(2), helpstring("conditional write")] HRESULT WriteStringLevel([in] BSTR bstrLine,[in] LONG lLevel);
  [id(3), helpstring("clear display")] HRESULT Clear();
};

[
 object,
 uuid(18c8b665-81a2-11d3-9254-00e09812f727),
 dual,
 helpstring("user interface agent for statistical connector"),
 pointer_default(unique)
]
interface IStatConnectorUIAgent : IDispatch
{
  // blank at the moment
};

#if 0
[
 object,
 uuid(54300425-c64d-4f83-801f-60828eaefa52),
 dual,
 pointer_default(unique),
 oleautomation
]
interface IStatConnectorComplexTest : IDispatch
{
  [id(1)]
  HRESULT MulComplex([in] struct StatConnectorComplex* pOperand1,
		     [in] struct StatConnectorComplex* pOperand2,
		     [out,retval] struct StatConnectorComplex** pResult);
  [id(2)]
  HRESULT ArrayComplex([in] SAFEARRAY(struct StatConnectorComplex) pIn,
		       [out,retval] SAFEARRAY(struct StatConnectorComplex)* pOut);
  [id(0x60030001),propget]
  HRESULT Complex([out,retval] struct StatConnectorComplex** pRet);
  [id(0x60030001),propput]
  HRESULT Complex([in] struct StatConnectorComplex* pRet);
}
#endif

//[
//	uuid(28c8b666-81a2-11d3-9254-00e09812f727),
//	version(1.0),
//	helpstring("StatConnectorCommon 1.0 Type Library")
//]
//library StatConnectorCommonLib
//{
//	importlib("stdole32.tlb");
//	importlib("stdole2.tlb");
//
//	interface ISGFX;
//	interface IStatConnectorCharacterDevice;
//};
